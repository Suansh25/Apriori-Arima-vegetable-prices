{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "975871fa-09d3-4cee-a768-4e625b71c8c2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Top 5 Association Rules (Apriori-like):\n",
      "         antecedent       consequent  support  confidence      lift\n",
      "0  Broccoli Bunches  Broccoli Crowns    0.525    0.857143  1.318681\n",
      "1        Cantaloupe           Celery    0.450    0.947368  1.263158\n",
      "\n",
      "ARIMA Forecast for Potatoes (next 12 weeks):\n",
      "farmprice       mean  mean_ci_lower  mean_ci_upper\n",
      "2019-05-26  1.488694       1.038967       1.938420\n",
      "2019-06-02  1.478789       0.877874       2.079704\n",
      "2019-06-09  1.470113       0.772817       2.167409\n",
      "2019-06-16  1.462513       0.697591       2.227435\n",
      "2019-06-23  1.455855       0.641275       2.270435\n",
      "2019-06-30  1.450023       0.597964       2.302082\n",
      "2019-07-07  1.444914       0.564022       2.325807\n",
      "2019-07-14  1.440439       0.537036       2.343842\n",
      "2019-07-21  1.436519       0.515328       2.357710\n",
      "2019-07-28  1.433085       0.497686       2.368483\n",
      "2019-08-04  1.430076       0.483218       2.376935\n",
      "2019-08-11  1.427441       0.471252       2.383630\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from itertools import combinations\n",
    "from statsmodels.tsa.arima.model import ARIMA\n",
    "\n",
    "# Load dataset (using your Windows file path)\n",
    "df = pd.read_csv(r\"C:\\Users\\prana\\Downloads\\ProductPriceIndex.csv\")\n",
    "\n",
    "# Clean numeric columns with coercion\n",
    "price_cols = ['farmprice', 'atlantaretail', 'chicagoretail', 'losangelesretail', 'newyorkretail']\n",
    "for col in price_cols:\n",
    "    df[col] = pd.to_numeric(df[col].str.replace('[\\$,]', '', regex=True), errors='coerce')\n",
    "df['averagespread'] = pd.to_numeric(df['averagespread'].str.rstrip('%'), errors='coerce') / 100\n",
    "\n",
    "# Drop rows with any missing numeric\n",
    "df = df.dropna(subset=price_cols + ['averagespread'])\n",
    "\n",
    "# Parse date\n",
    "df['date'] = pd.to_datetime(df['date'], errors='coerce')\n",
    "df = df.dropna(subset=['date'])\n",
    "df['year'] = df['date'].dt.year\n",
    "df['month'] = df['date'].dt.month\n",
    "\n",
    "# Assign seasons\n",
    "def assign_season(m):\n",
    "    if m in [12, 1, 2]:\n",
    "        return 'Winter'\n",
    "    elif m in [3, 4, 5]:\n",
    "        return 'Spring'\n",
    "    elif m in [6, 7, 8]:\n",
    "        return 'Summer'\n",
    "    else:\n",
    "        return 'Fall'\n",
    "\n",
    "df['season'] = df['month'].apply(assign_season)\n",
    "\n",
    "# Prepare transactions: high-spread items per season-year\n",
    "df['high_spread'] = df.groupby(['year', 'season'])['averagespread'] \\\n",
    "                      .transform(lambda x: x >= x.quantile(0.75))\n",
    "trans = df[df['high_spread']].groupby(['year', 'season'])['productname'].apply(list)\n",
    "transactions = list(trans)\n",
    "n_trans = len(transactions)\n",
    "\n",
    "# Manual Apriori-like analysis\n",
    "min_support = 0.3\n",
    "# Single supports\n",
    "item_counts = {}\n",
    "for trx in transactions:\n",
    "    for item in set(trx):\n",
    "        item_counts[item] = item_counts.get(item, 0) + 1\n",
    "\n",
    "freq_items = {item for item, count in item_counts.items() if count/n_trans >= min_support}\n",
    "\n",
    "# Pair counts\n",
    "pair_counts = {}\n",
    "for trx in transactions:\n",
    "    items = [i for i in set(trx) if i in freq_items]\n",
    "    for i, j in combinations(sorted(items), 2):\n",
    "        pair_counts[(i, j)] = pair_counts.get((i, j), 0) + 1\n",
    "\n",
    "# Build rules\n",
    "rules_list = []\n",
    "for (i, j), count in pair_counts.items():\n",
    "    support = count / n_trans\n",
    "    conf_i_j = count / item_counts[i]\n",
    "    lift_i_j = conf_i_j / (item_counts[j] / n_trans)\n",
    "    if support >= min_support and lift_i_j >= 1.2:\n",
    "        rules_list.append([i, j, support, conf_i_j, lift_i_j])\n",
    "\n",
    "rules_df = pd.DataFrame(rules_list, columns=['antecedent', 'consequent', 'support', 'confidence', 'lift']) \\\n",
    "              .sort_values('lift', ascending=False).head(5)\n",
    "\n",
    "# ARIMA forecasting for 'Potatoes'\n",
    "series = df[df['productname']=='Potatoes'].set_index('date')['farmprice'] \\\n",
    "            .resample('W').mean().interpolate()\n",
    "model = ARIMA(series, order=(1,1,1)).fit()\n",
    "forecast = model.get_forecast(steps=12)\n",
    "fc_df = forecast.summary_frame()\n",
    "\n",
    "# Display results\n",
    "print(\"Top 5 Association Rules (Apriori-like):\")\n",
    "print(rules_df)\n",
    "print(\"\\nARIMA Forecast for Potatoes (next 12 weeks):\")\n",
    "print(fc_df[['mean', 'mean_ci_lower', 'mean_ci_upper']])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e9322a79-acdc-4cce-9ac0-9714839f0f5c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
